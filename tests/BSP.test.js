/**
 * @file BSPPartition.test.js
 * @description Test suite for verifying the correctness and functionality of the BSPPartition class.
 * This suite checks the creation, overlap, coverage, and structure of partitions generated by the BSP algorithm.
 */

import BSPPartition from '../src/utils/BSPPartition';

describe('BSP Partitioning', () => {
  test('Should create the correct number of partitions', () => {
    const width = 800;
    const height = 600;
    const minSize = 50;
    const bsp = new BSPPartition(width, height, minSize);
    bsp.partitionAll();
    const partitions = bsp.getPartitions();

    // Ensure at least one partition is created
    // This test validates that the partitioning logic successfully creates one or more valid partitions.
    expect(partitions.length).toBeGreaterThan(0);

    // Validate that all partitions are within bounds
    partitions.forEach(partition => {
      expect(partition.width).toBeGreaterThanOrEqual(minSize);
      expect(partition.height).toBeGreaterThanOrEqual(minSize);
    });
  });

  test('Partitions should not overlap', () => {
    const width = 800;
    const height = 600;
    const minSize = 50;
    const bsp = new BSPPartition(width, height, minSize);
    bsp.partitionAll();
    const partitions = bsp.getPartitions();

    // This test ensures spatial consistency by verifying that no two partitions overlap.
    partitions.forEach((p1, i) => {
      partitions.forEach((p2, j) => {
        if (i !== j) {
          const noOverlap =
            p1.x + p1.width <= p2.x ||
            p2.x + p2.width <= p1.x ||
            p1.y + p1.height <= p2.y ||
            p2.y + p2.height <= p1.y;

          expect(noOverlap).toBe(true);
        }
      });
    });
  });

  test('Partitions should cover the entire map', () => {
    const width = 800;
    const height = 600;
    const minSize = 50;
    const bsp = new BSPPartition(width, height, minSize);
    bsp.partitionAll();
    const partitions = bsp.getPartitions();

    // This test checks if the entire map area is accounted for by the partitions.
    let totalArea = 0;
    partitions.forEach(p => {
      expect(p.width).toBeGreaterThan(0);
      expect(p.height).toBeGreaterThan(0);
      totalArea += p.width * p.height;
    });

    const mapArea = width * height;
    expect(totalArea).toBe(mapArea);
  });

  test('Each partition should be a leaf node', () => {
    const width = 800;
    const height = 600;
    const minSize = 50;
    const bsp = new BSPPartition(width, height, minSize);
    bsp.partitionAll();
    const partitions = bsp.getPartitions();

    // This test ensures that the final partitions are not further divided.
    partitions.forEach(partition => {
      expect(partition.isLeaf()).toBe(true);
    });
  });
});
